{
	"format_version": "1.10.0",
	"particle_effect": {
		"description": {
			"identifier": "sndbx:block_destruct",
			"basic_render_parameters": {
				"material": "particles_blend",
				"texture": "textures/particles/block_destruct"
			}
		},
		"components": {
			"minecraft:emitter_rate_instant": {
				"num_particles": "math.ceil(math.random(variable.emitter_radius*192,variable.emitter_radius*247))"
			},
			"minecraft:emitter_lifetime_once": {
				"active_time": 1
			},
			"minecraft:emitter_shape_box": {
			  "offset": [0, "variable.emitter_radius/2", 0],
				"half_dimensions": [
					"math.random(-variable.emitter_radius/2, variable.emitter_radius)", 
					"math.random(-variable.emitter_radius/2, variable.emitter_radius)", 
					"math.random(-variable.emitter_radius/2, variable.emitter_radius)"
				],
				"surface_only": true,
				"direction": ["Math.random(-1,1)", 1, "Math.random(-1,1)"]
			},
			"minecraft:particle_lifetime_expression": {
				"max_lifetime": "0.2 / (Math.random(0.0, 1.0) * 0.9 + 0.1)"
			},
			"minecraft:particle_initial_spin": {
				"rotation": "variable.particle_random_1 * 90 + 90"
			},
			"minecraft:particle_initial_speed": "Math.random(0, 3)",
			"minecraft:particle_motion_dynamic": {
				"linear_acceleration": [0, -9.8, 0],
				"linear_drag_coefficient": 0.5
			},
			"minecraft:particle_appearance_billboard": {
				"size": ["variable.particle_random_1 * 0.0375 + 0.0375", "variable.particle_random_1 * 0.0375 + 0.0375"],
				"facing_camera_mode": "lookat_xyz",
				"uv": {
					"texture_width": 1,
					"texture_height": 1,
					"uv": [0, 0],
					"uv_size": [1, 1]
				}
			},
			"minecraft:particle_motion_collision": {
				"collision_drag": 5,
				"coefficient_of_restitution": 0.1,
				"collision_radius": 0.1
			},
			"minecraft:particle_appearance_lighting": {},
			"minecraft:particle_appearance_tinting": {
				"color": [
				  "Math.clamp(((variable.particle_random_1*variable.color_r1)+(variable.color_r2-(variable.color_r2*variable.particle_random_1)))/255, 0, 1)", 
				  "Math.clamp(((variable.particle_random_1*variable.color_g1)+(variable.color_g2-(variable.color_g2*variable.particle_random_1)))/255, 0, 1)", 
				  "Math.clamp(((variable.particle_random_1*variable.color_b1)+(variable.color_b2-(variable.color_b2*variable.particle_random_1)))/255, 0, 1)", 
				  "variable.color_a"
				]
			}
		}
	}
}